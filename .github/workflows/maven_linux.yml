# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Linux test and SNAPSHOT deploy with Maven

on:
  push:
    branches: [ master, highprecision ]
  pull_request:
    branches: [ master, highprecision ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Test and package with Maven
      run: mvn test

  deploy-to-overture:
    # if: github.event_name == 'push'
    if: ${{ false }}  # disable for now
    needs: build
    runs-on: ubuntu-latest
    steps:
        - name: Checking out  
          uses: actions/checkout@v3

        - name: Getting POM version
          id: get_version
          run: echo "version=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

        - name: Configure deploy for snapshots
          run: echo "SERVER_ID=vdmj.overture.au.dk-snapshots" >> $GITHUB_ENV

        - name: Check variables
          run: |
            echo ${{ env.SERVER_ID }}
            echo ${{ steps.get_version.outputs.version }}

        - name: Set up JDK
          if: contains(${{ steps.get_version.outputs.version }}, 'SNAPSHOT' )
          uses: actions/setup-java@v3
          with:
            java-version: '8'
            distribution: 'temurin'
            cache: maven
            server-id: ${{ env.SERVER_ID }}
            server-username: MAVEN_USERNAME
            server-password: MAVEN_PASSWORD

        - name: Deploy
          if: contains(${{ steps.get_version.outputs.version }}, 'SNAPSHOT' )
          run: mvn -B deploy
          env:
            MAVEN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

  deploy-to-github:
    if: ${{ github.event_name == 'push' && contains(${{ steps.get_version.outputs.version }}, 'SNAPSHOT' ) }}
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checking out
        uses: actions/checkout@v3

      - name: Getting POM version
        id: get_version
        run: echo "version=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          server-id: github
          cache: maven

      - name: Publish artifacts to GitHub Packages
        run: mvn --batch-mode deploy -Pgithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PACKAGES_REPO_URL: https://maven.pkg.github.com/${{ github.repository }}

  signal-vdm-vscode:
    runs-on: ubuntu-latest
    needs: deploy-to-github
    if: ${{ github.repository }} == "glennlaursen/vdmj"

    steps:
      - name: Checking out
        uses: actions/checkout@v3

      - name: Getting POM artifact info
        id: get_artifact_info
        run: |
          echo "version=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          echo "groupId=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.groupId}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          echo "artifactId=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.artifactId}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Get configId if master
        id: get_config_id
        run: |
          if [ ${{ github.ref }} == 'refs/heads/master' ]; then
            echo "configId=vdmj" >> $GITHUB_OUTPUT
          else
            echo "configId=vdmj_hp" >> $GITHUB_OUTPUT
          fi
          
      - name: Send repository dispatch http request to VDM-VSCode
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.VDM_VSCODE_PAT }}
          repository: glennlaursen/vdm-vscode
          event-type: new-jar
          client-payload: '{ "configId": "${{ steps.get_config_id.outputs.configId }}", "version": "${{ steps.get_artifact_info.outputs.version }}" }'
